kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: nvmesh-csi-node-driver
spec:
  selector:
    matchLabels:
      app: nvmesh-csi-node-driver
  template:
    metadata:
      labels:
        app: nvmesh-csi-node-driver
    spec:
      serviceAccount: nvmesh-csi-driver
      hostNetwork: true
      nodeSelector:
        nvmesh.excelero.com/nvmesh-client: ''
      containers:
        # NVMesh Driver
        - name: nvmesh-csi-node-driver
          # if we use image tag :latest kubernetes will try to fetch from Docker Hub (hub.docker.com)
          image: "placeholder"
          # TODO: revert imagePullPolicy to IfNotPresent once updated image is in DockerHub
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          env:
            - name: DRIVER_TYPE
              value: "Node"
            - name: SOCKET_PATH
              value: unix:///csi/csi.sock
            - name: MANAGEMENT_SERVERS
              valueFrom:
                configMapKeyRef:
                  name: nvmesh-csi-config
                  key: management.servers
            - name: MANAGEMENT_PROTOCOL
              valueFrom:
                configMapKeyRef:
                  name: nvmesh-csi-config
                  key: management.protocol
            - name: MANAGEMENT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: nvmesh-credentials
                  key: username
            - name: MANAGEMENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nvmesh-credentials
                  key: password
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: plugin-socket-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet/
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
            - name: host-bin
              mountPath: /host/bin
            - name: var-opt-nvmesh
              mountPath: /var/opt/NVMesh
            - name: opt-nvmesh
              mountPath: /opt/NVMesh
            - name: etc-opt-nvmesh
              mountPath: /etc/opt/NVMesh
        # Registrar
        - name: csi-driver-registrar
          image: quay.io/k8scsi/csi-node-driver-registrar:v1.1.0
          args:
            - "--csi-address=/csi/csi.sock"
            - "--kubelet-registration-path=/var/lib/kubelet/plugins/nvmesh-csi.excelero.com/csi.sock"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/nvmesh-csi.excelero.com /registration/nvmesh-csi.excelero.com-reg.sock"]
          volumeMounts:
            - name: plugin-socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
      volumes:
        - name: config-volume
          configMap:
            name: nvmesh-csi-config
        - name: plugin-socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/nvmesh-csi.excelero.com/
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet/
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
        - name: host-bin
          hostPath:
            path: /var/bin/nvmesh
        - name: var-opt-nvmesh
          hostPath:
            path: /var/opt/NVMesh
        - name: opt-nvmesh
          hostPath:
            path: /opt/NVMesh
        - name: etc-opt-nvmesh
          hostPath:
            path: /etc/opt/NVMesh